// Autogenerated by GLExtractor 0.5.99b (gl3 mode) (C) Sergey Kosarevsky
// Part of Linderdaum Engine
// http://www.linderdaum.com

#pragma once

#include "Platform.h"
#include <stdio.h>

#include <windows.h>
#include "GL/gl3.h"
#include "GL/wglext.h"

#include "LGLAPI.h"

typedef HDC DEVICE_CONTEXT_TYPE;
typedef HGLRC GL_CONTEXT_TYPE;

namespace LGL
{
	/// Loader of OpenGL extensions
	class clGLExtRetriever
	{
	public:
		//
		// clGLExtRetriever
		//
		clGLExtRetriever(): FLibHandle( NULL ) {};
		void GetAPI( sLGLAPI* LGL3 ) const;
		void Reload( sLGLAPI* LGL3 );
		//
		bool  ChooseAndSetPixelFormat( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, int BitsPerPixel, int ZBufferBits, int StencilBits, int Multisample );
		GL_CONTEXT_TYPE CreateContext( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, int VersionMajor, int VersionMinor );
		void  DeleteContext( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, GL_CONTEXT_TYPE RenderContext );
		GL_CONTEXT_TYPE CreateContextFull( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, int BitsPerPixel, int ZBufferBits, int StencilBits, int Multisample, int VersionMajor, int VersionMinor );
		GL_CONTEXT_TYPE MakeCurrent( sLGLAPI* LGL3, DEVICE_CONTEXT_TYPE DeviceContext, GL_CONTEXT_TYPE RenderContext );
	private:
		void* GetGLProc( sLGLAPI* LGL3, const char* Name ) const;
		void* FLibHandle;
	};
};
